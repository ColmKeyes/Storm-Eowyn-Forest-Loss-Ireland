# Storm Eowyn Forest Loss Ireland - Plan of Action

## Project Overview
Adapt existing Sentinel-1 InSAR coherence pipeline to quantify forest cover loss in Ireland caused by Storm Eowyn (January 2025). The project will leverage the existing "Sentinel-1 Coherence Pipeline" codebase and modify it for Irish geographic extent, temporal focus on Storm Eowyn, and forest change detection.

## Phase 1: Pipeline Adaptation and Setup (Days 1-2)

### 1.1 Geographic Configuration
- Modify `1_generate_s1_catalog.py` to use Ireland bounding box (-10.5, 51.4, -5.4, 55.4)
- Update coordinate system with WGS84 to Irish Grid transformation (EPSG:2157)
- Set spatial alignment tolerance to <0.5 pixels (10m at 20m output resolution)
- Configure for Ireland's terrain with 20m output resolution target

### 1.2 Temporal Configuration  
- Adjust date ranges to focus on Storm Eowyn timeframe (Dec 2024 - Feb 2025)
- Configure pre-storm baseline period (Nov-Dec 2024)
- Set post-storm analysis period (Jan-Feb 2025)

### 1.3 Forest Mask Integration
- Source and prepare Irish forest extent mask (Corine Land Cover or national forestry data)
- Implement mask alignment and cropping functions
- Ensure spatial registration with Sentinel-1 coherence products

## Phase 2: Data Acquisition and Preprocessing (Days 3-4)

### 2.1 Scene Catalog Generation
- Run adapted catalog generation for Ireland AOI
- Generate Sentinel-1 scene inventory for target timeframe
- Create partitioned Parquet dataset for efficient querying

### 2.2 Optimal Pair Selection
- Modify `2_scene_pair_selector.py` for Storm Eowyn temporal constraints
- Select pre-storm reference scenes (Dec 2024)
- Select post-storm secondary scenes (Jan-Feb 2025)
- Optimize for minimal perpendicular baselines and coherent pairs

### 2.3 Scene Download and Validation
- Download selected Sentinel-1 SLC scenes via ASF
- Validate data integrity and completeness
- Organize data structure for processing pipeline

## Phase 3: InSAR Processing and Coherence Analysis (Days 5-7)

### 3.1 Coherence Processing
- Adapt `sentinel1slc.py` with JVM flags: `-Xmx16G -XX:+UseG1GC`
- Process pre/post-storm coherence maps in batches of 10 scenes
- Generate time-series stack with window sizes [3,12] (empirically tested)
- Apply coherence quality threshold (>0.3 for valid pixels)
- Tag failed pixels explicitly in output

### 3.2 Forest Mask Application
- Align forest extent mask with coherence products
- Crop coherence maps to forest areas only
- Create forest-masked coherence time series

### 3.3 Quality Control and Validation
- Implement coherence quality metrics (>80% valid pixels per map)
- Validate against known impacts with Sentinel-2/MSI cross-check
- Generate comprehensive logs with UUIDs and timestamps
- Maintain processing provenance including SNAP version and parameters

## Phase 4: Change Detection and Analysis (Days 8-9)

### 4.1 Coherence Change Detection
- Implement coherence loss detection algorithms
- Calculate pre/post-storm coherence differences
- Apply statistical thresholds for forest loss identification

### 4.2 Forest Loss Quantification
- Calculate forest loss area statistics
- Generate spatial distribution maps of forest damage
- Create confidence metrics for detected changes

### 4.3 Results Validation
- Cross-validate with optical imagery where available
- Compare with reported storm damage locations
- Assess detection accuracy and false positive rates

## Phase 5: Output Generation and Cataloging (Days 10-11)

### 5.1 Geoparquet Catalog Creation
- Convert results to Geoparquet format for efficient access
- Implement spatial and temporal partitioning
- Include comprehensive metadata and processing provenance

### 5.2 Visualization and Reporting
- Generate summary maps and statistics
- Create processing workflow documentation
- Prepare results for downstream analysis

### 5.3 Code Documentation and Cleanup
- Document all code modifications and new functions
- Remove irrelevant Borneo-specific components
- Create user guide for Ireland-adapted pipeline

## Key Technical Considerations

### Dependencies
- SNAP (Sentinel Application Platform) for InSAR processing
- ESA SNAPPY Python bindings
- ASF Search API for data discovery and download
- GeoPandas, PyArrow for spatial data handling
- Earthdata authentication for NASA/ASF access

### Processing Requirements
- High-memory system for SNAP processing (16GB+ RAM recommended)
- Sufficient storage for SLC data and intermediate products (~100GB+)
- SNAP GPT configuration for batch processing

### Quality Assurance
- Implement error handling for failed processing pairs
- Create processing logs and status tracking
- Validate outputs at each processing stage

## Risk Mitigation

### Data Availability Risks
- Verify Sentinel-1 data availability for target timeframe
- Identify backup date ranges if primary dates unavailable
- Plan for cloud cover impacts on validation data

### Processing Risks
- Test processing chain on small subset before full run
- Implement checkpointing for long processing runs
- Plan for SNAP memory management and stability issues

### Technical Risks
- Validate coordinate system transformations
- Test forest mask alignment accuracy
- Verify coherence calculation parameters for Irish conditions

## Success Metrics
- Process >90% of available coherence pairs successfully
- Achieve >90% detection rate with <10% false positives
- Generate complete time series with >80% valid pixels
- Produce Geoparquet catalog with full provenance metadata
- Validate against optical data with confusion matrix metrics

## Deliverables Timeline
- Day 2: Adapted pipeline configuration
- Day 4: Complete scene catalog and selected pairs
- Day 7: Processed coherence time series
- Day 9: Forest loss detection results
- Day 11: Final Geoparquet catalog and documentation
